#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import sys
import os
import gtk
import gio
import pango
import webkit
import feedparser
import couchdb
from desktopcouch.records.server import CouchDatabase

from twisted.internet import gtk2reactor
gtk2reactor.install()

from twisted.internet import reactor, defer
from twisted.web import client

# Check if we are working in the source tree or from the installed 
# package and mangle the python path accordingly
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))

from feedie import AboutFeedieDialog, PreferencesFeedieDialog
from feedie.SourcesView import SourcesView
from feedie.posts_tree_model import PostsTreeModel
from feedie import models
from feedie import fetcher
from feedie.feedieconfig import getdatapath
from feedie import images
from feedie import incoming
from feedie import conn
from feedie import util
from feedie import http

MAX_FEED_DOC_SIZE = 1000000

from feedie import design_doc

sources = None

def subscribe(uri, more=()):
    promise = util.EventEmitter()
    def got_all(result):
      print type(result)
      doc = result.body

      try:
          print 'parsing...'
          xml = feedparser.parse(doc)
          ifeed = incoming.Feed(doc)
          print 'done'
          print xml.version

          print xml.feed.keys()
          if xml.version: # feedparser thinks this is a feed
            promise.callback((sources.subscribe(uri, xml), xml, ifeed))
            return

          if 'links' in xml.feed:
            uris = [x.href for x in xml.feed.links if x.rel == 'alternate']
            d = subscribe(uris[0], uris[1:])
            d.chainDeferred(promise)
            d.chainEvents(promise)
            return

          promise.errback(RuntimeError('Sorry, could not find a feed at ' + uri))
          return
      except Exception, ex:
          raise
          promise.errback(ex)
          return

    # TODO cancel ability
    d = fetcher.fetch(uri)
    d.addCallback(got_all)
    d.addErrback(promise.errback)
    d.chainEvents(promise)
    return promise

class FeedieWindow(gtk.Window):
    __gtype_name__ = "FeedieWindow"

    def __init__(self):
        """__init__ - This function is typically not called directly.
        Creation a FeedieWindow requires redeading the associated ui
        file and parsing the ui definition extrenally,
        and then calling FeedieWindow.finish_initializing().

        Use the convenience function NewFeedieWindow to create
        FeedieWindow object.

        """
        conn.database = CouchDatabase('feedie', create=True)
        design_doc.add_views()

    def finish_initializing(self, builder):
        global sources
        """finish_initalizing should be called after parsing the ui definition
        and creating a FeedieWindow object with it in order to finish
        initializing the start of the new FeedieWindow instance.

        """
        #get a reference to the builder and set up the signals
        self.builder = builder
        self.builder.connect_signals(self)

        #uncomment the following code to read in preferences at start up
        #dlg = PreferencesFeedieDialog.NewPreferencesFeedieDialog()
        #self.preferences = dlg.get_preferences()

        #code for other initialization actions should be added here

        # now add other widgets that glade doesn't know about

        sources = models.Sources()
        self.sources_view = SourcesView(sources)
        sources.add_builtin(models.AllNewsSource())
        self.sources_view.show()

        self.builder.get_object('vbox2').pack_start(self.sources_view)

        self.web = webkit.WebView()
        #self.web.open('http://xph.us/nopage')
        self.web.open('file:/home/kr/src/xph.us/_site/index.html')
        self.web.show()
        self.builder.get_object('scrolledwindow1').add(self.web)

        treeview = self.builder.get_object('posts-treeview')
        treeview.set_property('rules-hint', True)

        treeview.insert_column_with_attributes(0, 'Starred',
            gtk.CellRendererPixbuf(),
            pixbuf=PostsTreeModel.colnum('star'))
        treeview.get_column(0).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        treeview.get_column(0).set_fixed_width(24)
        treeview.get_column(0).set_min_width(24)
        treeview.get_column(0).set_max_width(24)
        star_heading = images.make_widget('blank')
        star_heading.show()
        treeview.get_column(0).set_widget(star_heading)

        treeview.insert_column_with_attributes(1, 'Read',
            gtk.CellRendererPixbuf(),
            pixbuf=PostsTreeModel.colnum('read'))
        treeview.get_column(1).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        treeview.get_column(1).set_fixed_width(24)
        treeview.get_column(1).set_min_width(24)
        treeview.get_column(1).set_max_width(24)
        #treeview.get_column(1).set_widget(read_dot)
        read_heading = images.make_widget('blank')
        read_heading.show()
        treeview.get_column(1).set_widget(read_heading)

        title_cell_renderer = gtk.CellRendererText()
        title_cell_renderer.set_property('ellipsize', pango.ELLIPSIZE_END)
        treeview.insert_column_with_attributes(2, 'Title',
            title_cell_renderer,
            text=PostsTreeModel.colnum('title'),
            weight=PostsTreeModel.colnum('weight'))
        treeview.get_column(2).set_sort_column_id(PostsTreeModel.colnum('title'))
        treeview.get_column(2).set_expand(True)

        updated_cell_renderer = gtk.CellRendererText()
        updated_cell_renderer.set_property('ellipsize', pango.ELLIPSIZE_END)
        treeview.insert_column_with_attributes(3, 'Date',
            updated_cell_renderer,
            text=PostsTreeModel.colnum('pretty_date'),
            weight=PostsTreeModel.colnum('weight'))
        treeview.get_column(3).set_sort_column_id(PostsTreeModel.colnum('updated_at'))
        treeview.get_column(3).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        treeview.get_column(3).set_fixed_width(150)
        treeview.get_column(3).set_min_width(150)
        treeview.get_column(3).set_max_width(150)

        self.builder.get_object('vpaned1').set_position(200)
        self.builder.get_object('main-area').set_position(225)
        blue = gtk.gdk.color_parse('#7db6ff')
        self.builder.get_object('subscribe-box').modify_bg(gtk.STATE_NORMAL, blue)

        self.sources_view.connect('selection-changed', self.select_feed)

    def select_feed(self, widget, selected_id):
      source = widget.selected

      self.builder.get_object('action-remove-feed').set_sensitive(bool(source))

      model, title = None, ''
      if source:
        model = gtk.TreeModelSort(PostsTreeModel(source))
        model.set_sort_column_id(PostsTreeModel.colnum('updated_at'),
            gtk.SORT_DESCENDING)
        model.set_default_sort_func(None)
        title = u'%s \u2013 %d posts' % (source.title, len(model))
      treeview = self.builder.get_object('posts-treeview')
      treeview.set_model(model)
      treeview.get_column(2).set_title(title)

    def about(self, widget, data=None):
        """about - display the about box for feedie """
        about = AboutFeedieDialog.NewAboutFeedieDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """preferences - display the preferences window for feedie """
        prefs = PreferencesFeedieDialog.NewPreferencesFeedieDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            #make any updates based on changed preferences here
            pass
        prefs.destroy()

    def quit(self, widget, data=None):
        """quit - signal handler for closing the FeedieWindow"""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """on_destroy - called when the FeedieWindow is close. """
        #clean up code for saving application state should be added here

        #gtk.main_quit()
        reactor.stop()

    def show_subscribe(self, widget, data=None):
        self.show_subscribe_box()

    def cancel_subscribe(self, widget, data=None):
        self.hide_subscribe_box()

    def start_subscribe(self):
        def success((feed, xml)):
          self.hide_subscribe_box()
          self.sources_view.flash(feed.id)

        def error(reason):
          self.show_subscribe_box()

          message = str(reason)

          dialog = gtk.MessageDialog(
              parent=self,
              flags=gtk.DIALOG_MODAL|gtk.DIALOG_DESTROY_WITH_PARENT,
              type=gtk.MESSAGE_WARNING,
              buttons=gtk.BUTTONS_CLOSE,
              message_format=message)
          dialog.connect('response', lambda *x: dialog.destroy())
          dialog.show()

        def begun(event):
          self.subscribe_progress(0.04)

        def progress(event, got, outof):
          print 'progress', (1.0 * got / outof)
          self.subscribe_progress(1.0 * got / outof)

        self.subscribe_progress(0.02)
        self.builder.get_object('subscribe-button').set_sensitive(False)
        uri = self.builder.get_object('subscribe-entry').get_text()
        d = subscribe(uri)
        d.addListener('body', progress)
        d.addListener('begin', begun)
        d.addCallback(success)
        d.addErrback(error)

    def subscribe_cb(self, widget, data=None):
        self.start_subscribe()

    def subscribe_progress(self, x):
      self.builder.get_object('subscribe-entry').set_progress_fraction(x)

    def show_subscribe_box(self):
        self.builder.get_object('subscribe-box').show()
        self.builder.get_object('subscribe-entry').grab_focus()
        self.subscribe_progress(0)
        self.builder.get_object('subscribe-button').set_sensitive(True)

    def hide_subscribe_box(self):
        self.builder.get_object('subscribe-box').hide()
        self.builder.get_object('subscribe-entry').set_text('')
        self.builder.get_object('subscribe-button').set_sensitive(True)

    def subscribe_entry_keypress(self, widget, data=None):
        key = gtk.gdk.keyval_name(data.keyval)

        if key == 'Return':
          self.start_subscribe()
          return

        if key == 'Escape':
          self.hide_subscribe_box()
          return

    def remove_feed(self, widget, data=None):
      sel = self.sources_view.selected
      if sel:
        sel.delete()

    def refresh(self, widget, data=None):
      #self.builder.get_object('scrolledwindow1').hide()
      global dummy_counter
      dummy_counter += 1
      dummy_counter %= 2
      feedids = ['http://feeds2.feedburner.com/krarick', 'http://ranchero.com/xml/rss.xml']
      self.sources_view.flash(feedids[dummy_counter])

dummy_counter = 0

def NewFeedieWindow():
    """NewFeedieWindow - returns a fully instantiated
    FeedieWindow object. Use this function rather than
    creating a FeedieWindow directly.
    """

    #look for the ui file that describes the ui
    ui_filename = os.path.join(getdatapath(), 'ui', 'FeedieWindow.ui')
    if not os.path.exists(ui_filename):
        ui_filename = None

    builder = gtk.Builder()
    builder.add_from_file(ui_filename)
    window = builder.get_object("feedie_window")
    window.finish_initializing(builder)
    return window

if __name__ == "__main__":
    #support for command line options
    import logging, optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Show debug messages")
    (options, args) = parser.parse_args()

    #set the logging level to show debug messages
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    #run the application
    gtk.gdk.threads_init()
    window = NewFeedieWindow()
    window.set_default_size(900, 1000)
    window.show()
    #gtk.main()
    reactor.run()

