#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import locale
locale.setlocale(locale.LC_NUMERIC)

import sys
import os
import cgi
import traceback
import dbus, dbus.service
import gtk
import gconf
import pango
import webkit
import couchdb
import desktopcouch
import webbrowser
import xml
import colorsys
from xml.dom import minidom
from desktopcouch.records.server import CouchDatabase
from Cheetah.Template import Template

webkit.WEB_NAVIGATION_REASON_OTHER = 5

webkit.LOAD_COMMITTED = 1
webkit.LOAD_FINISHED = 2
webkit.LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT = 3

# Check if we are working in the source tree or from the installed 
# package and mangle the python path accordingly
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))

from feedie import gtk2reactor
gtk2reactor.install()

from twisted.internet import reactor, defer
from twisted.web import client

from feedie import AboutFeedieDialog, PreferencesFeedieDialog
from feedie.SourcesView import SourcesView
from feedie.posts_tree_model import PostsTreeModel
from feedie import models
from feedie.feedieconfig import getdatapath
from feedie import images
from feedie import incoming
from feedie import util
from feedie import http
from feedie import database
from feedie import throttle

MAX_FEED_DOC_SIZE = 1000000

from feedie import design_doc

sources = None

MAIN_HTTP = http.Client()
MAIN_HTTP.max_connections = 5
MAIN_HTTP.max_connections_per_domain = 2

DB_HTTP = http.Client()
DB_HTTP.max_connections = 6
DB_HTTP.max_connections_per_domain = 6

ICON_HTTP = http.Client()
ICON_HTTP.max_connections = 50
ICON_HTTP.max_connections_per_domain = 6

THROTTLE = throttle.Throttler(save_iposts=1)

post_template = Template(file=getdatapath() + '/templates/post.html')
source_template = Template(file=getdatapath() + '/templates/source.html')

gconf_client = gconf.client_get_default()

feed_id_colnum = PostsTreeModel.colnum('feed_id')
post_id_colnum = PostsTreeModel.colnum('post_id')
read_column = PostsTreeModel.colnum('read')
title_colnum = PostsTreeModel.colnum('title')

def get_post(model, path):
  iter = model.get_iter(path)
  feed_id = model.get_value(iter, feed_id_colnum)
  post_id = model.get_value(iter, post_id_colnum)
  feed = sources.get_feed(feed_id)
  return feed.posts.get(post_id, None)

def mark_selected_posts_as_read(treeviewsel):
  model, paths = treeviewsel.get_selected_rows()
  posts = [get_post(model, path) for path in paths]
  sources.mark_posts_as(posts, read=True)

def mark_selected_posts_as_unread(treeviewsel):
  model, paths = treeviewsel.get_selected_rows()
  posts = [get_post(model, path) for path in paths]
  sources.mark_posts_as(posts, read=False)

class FeedieWindow(gtk.Window):
    __gtype_name__ = "FeedieWindow"

    def __init__(self):
        """__init__ - This function is typically not called directly.
        Creation a FeedieWindow requires redeading the associated ui
        file and parsing the ui definition extrenally,
        and then calling FeedieWindow.finish_initializing().

        Use the convenience function NewFeedieWindow to create
        FeedieWindow object.

        """

        couchdb = CouchDatabase('feedie', create=True).db
        oauth_tokens = desktopcouch.local_files.get_oauth_tokens()
        self.db = database.AsyncCouch(couchdb, DB_HTTP, oauth_tokens)
        self.search_terms = []

        design_doc.add_views(self.db)

    @defer.inlineCallbacks
    def finish_initializing(self, builder):
        global sources
        """finish_initalizing should be called after parsing the ui definition
        and creating a FeedieWindow object with it in order to finish
        initializing the start of the new FeedieWindow instance.

        """
        #get a reference to the builder and set up the signals
        self.builder = builder
        self.builder.connect_signals(self)

        #code for other initialization actions should be added here

        # now add other widgets that glade doesn't know about

        def configure_event(window, event):
          gconf_client.set_pair(
              '/apps/feedie/geometry/window-size',
              'GCONF_VALUE_INT',
              'GCONF_VALUE_INT',
              event.width,
              event.height)

        self.connect('configure-event', configure_event)

        self._preferences = models.Preferences(self.db)
        yield self._preferences.load()

        self.sources_treeview = builder.get_object('sources-treeview')
        self.sources_treeview.set_show_expanders(False)
        self.sources_treeview.set_level_indentation(10)
        sources_treeview_selection = self.sources_treeview.get_selection()
        sources_treeview_selection.set_mode(gtk.SELECTION_BROWSE)
        col = gtk.TreeViewColumn()
        col.set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        source_label_renderer = gtk.CellRendererText()
        col.pack_start(source_label_renderer)
        col.add_attribute(source_label_renderer, 'text', 1)
        self.sources_treeview.append_column(col)

        stv_sel = self.sources_treeview.get_selection()
        stv_sel.set_select_function(lambda path: len(path) > 1)

        self.sources_treestore = builder.get_object('sources-treestore')

        sources = models.Sources(self.db, MAIN_HTTP, ICON_HTTP, THROTTLE,
            self._preferences, self.sources_treestore)

        self.sources_treeview.expand_all()

        yield sources.load()
        self.unreadnews = models.UnreadNewsSource(self.db)
        sources.add_builtin(self.unreadnews)
        starrednews = models.StarredNewsSource(self.db)
        sources.add_builtin(starrednews)
        self.sources_view = SourcesView(sources)
        self.sources_view.show()

        self.builder.get_object('sources-scrolledwindow').add_with_viewport(self.sources_view)
        vp = self.builder.get_object('sources-scrolledwindow').get_child()
        vp.set_shadow_type(gtk.SHADOW_NONE)

        def poppop(webview, menu):
          def blah_blah(item):
            pass

          for item in menu:
            menu.remove(item)

          item = gtk.MenuItem('_Blah Blah')
          item.show()
          item.connect('activate', blah_blah)
          menu.append(item)

        def nav_policy(view, frame, request, nav_action, decision):
          reason = nav_action.get_reason()
          if reason == webkit.WEB_NAVIGATION_REASON_OTHER:
            decision.use()
          else:
            webbrowser.open_new(request.get_uri())
            decision.ignore()
          return True

        def request_starting(view, frame, resource, request, response):
          uri = request.get_uri()
          if uri.startswith('res:'):
            pass

        posts_status = self.builder.get_object('posts-status')
        posts_status.set_text('')
        def web_hovering_over_link(view, title, uri):
          message = uri if uri else ''
          posts_status.set_text(message)

        self.web = webkit.WebView()
        self.web.set_maintains_back_forward_list(False)
        self.web.set_custom_encoding('UTF-8')
        self.web.connect('populate-popup', poppop)
        self.web.connect('navigation-policy-decision-requested', nav_policy)
        self.web.connect('resource-request-starting', request_starting)
        self.web.connect('hovering-over-link', web_hovering_over_link)
        self.web.connect('key-press-event', self.paging_keypress)
        websettings = self.web.get_settings()
        websettings.set_property('user-stylesheet-uri',
            'file://' + getdatapath() + '/css/Default.css')
        self.web.show()

        self.builder.get_object('scrolledwindow1').add(self.web)

        self.current_post_ids = None

        post_id_colnum = PostsTreeModel.colnum('post_id')
        feed_id_colnum = PostsTreeModel.colnum('feed_id')

        to_cancel = []
        @defer.inlineCallbacks
        def update_web_view():
          def loaded(view, progress, post):
            okay_to_mark_read = [True]
            def set_read_updated_at():
              if okay_to_mark_read[0]:
                treeviewsel = treeview.get_selection()
                mark_selected_posts_as_read(treeviewsel)

            def cancel():
              okay_to_mark_read[0] = False

            frame = self.web.get_main_frame()
            status = frame.get_property('load-status')
            if status in (webkit.LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT,
                          webkit.LOAD_FINISHED):
              self.web.disconnect(handler_id)
              reactor.callLater(0.20, set_read_updated_at)
              to_cancel.append(cancel)

          if self.current_post_ids:
            feed_id, post_id = self.current_post_ids
            feed = sources.get_feed(feed_id)
            post = yield feed.load_post(post_id)
            post_template.post = post
            post_template.display_feed = (feed_id != self.sources_view.selected_id)
            try:
              html = str(post_template)
            except Exception, e:
              detail = traceback.format_exc()
              t = '''
                <h1>Template Error</h1>
                <dl><dt>feed</dt><dd>%s</dd><dt>post</dt><dd>%s</dd></dl>
                <pre><code>%s</code></pre>
              '''
              html = t % (feed_id, post_id, cgi.escape(detail))
            base = post.base()
            while to_cancel:
              to_cancel.pop()()
            handler_id = self.web.connect('load-progress-changed', loaded, post)
          else:
            html, base = '', ''

          self.web.load_html_string(html, base)

        def treeview_selection_changed(treeviewsel):
          any = treeviewsel.count_selected_rows() > 0
          self.builder.get_object('action-mark-as-read').set_sensitive(any)
          self.builder.get_object('action-mark-as-unread').set_sensitive(any)

          self.set_next_unread_sensitivity()

          if treeviewsel.count_selected_rows() == 1:
            model, (path,) = treeviewsel.get_selected_rows()
            iter = model.get_iter(path)
            new_post_ids = (model.get_value(iter, feed_id_colnum),
                            model.get_value(iter, post_id_colnum))
          else:
            new_post_ids = None

          while to_cancel:
            to_cancel.pop()()

          if new_post_ids != self.current_post_ids:
            self.current_post_ids = new_post_ids
            update_web_view()

        treeview = self.treeview = self.builder.get_object('posts-treeview')
        treeview.set_property('rules-hint', True)
        treeviewsel = treeview.get_selection()
        treeviewsel.set_mode(gtk.SELECTION_MULTIPLE)
        treeviewsel.connect('changed', treeview_selection_changed)
        update_web_view()
        any = treeviewsel.count_selected_rows() > 0
        self.builder.get_object('action-mark-as-read').set_sensitive(any)
        self.builder.get_object('action-mark-as-unread').set_sensitive(any)

        treeview_heading_widgets = []

        sources_status = self.builder.get_object('sources-status')

        def style_set(widget, previous_style):
          def modify_all(widget, fd):
            widget.modify_font(fd)
            if isinstance(widget, gtk.Container):
              for child in widget.get_children():
                modify_all(child, fd)

          fd = widget.get_style().font_desc.copy()
          if fd.get_size() > (9 * pango.SCALE):
            fd.set_size(int(fd.get_size() / 1.2))
          self.sources_view.modify_font(fd)
          self.sources_treeview.modify_font(fd)
          treeview.modify_font(fd)
          sources_status.modify_font(fd)
          posts_status.modify_font(fd)
          for col in treeview.get_columns():
            w = col.get_widget()
            if w: w.modify_font(fd)

        self.connect('style-set', style_set)

        list_bg = (
          (.00, 0.0000, 0.9020), # neither
          (.00, 0.0000, 0.9020), # only selected
          (.00, 0.0652, 0.9020), # only focused
          (.00, 0.0652, 0.9020), # selected and focused
        )
        list_bg_colors = []
        def stv_style_set(stv, previous_style):
          style = stv.get_style()
          h = style.base[gtk.STATE_SELECTED].hue
          self._color = {}
          conv = colorsys.hsv_to_rgb
          list_bg_colors[:] = tuple(conv(h + r, s, v) for r,s,v in list_bg)
          i = 2 * int(bool(self.props.is_active)) + 1
          bg_color = gtk.gdk.Color(*list_bg_colors[i])
          if bg_color != style.base[gtk.STATE_NORMAL]:
            stv.modify_base(gtk.STATE_NORMAL, bg_color)

        self.sources_treeview.connect('style-set', stv_style_set)
        stv_style_set(self.sources_treeview, None)

        def is_active_cb(*args):
          stv_style_set(self.sources_treeview, None)

        self.connect('notify::is-active', is_active_cb)

        def treeview_clicked(tv, event):
          path_info = tv.get_path_at_pos(int(event.x), int(event.y))
          if path_info:
            path, col, cx, cy = path_info
            if col == read_column:
              model = tv.get_model()
              iter = model.get_iter(path)
              feed_id = model.get_value(iter, feed_id_colnum)
              post_id = model.get_value(iter, post_id_colnum)
              feed = sources.get_feed(feed_id)
              post = feed.posts.get(post_id, None)
              if post:
                post.toggle_read_updated_at(sources)
              return True
            if col == star_column:
              model = tv.get_model()
              iter = model.get_iter(path)
              feed_id = model.get_value(iter, feed_id_colnum)
              post_id = model.get_value(iter, post_id_colnum)
              feed = sources.get_feed(feed_id)
              post = feed.posts.get(post_id, None)
              if post:
                post.toggle_starred()
              return True
          return False

        treeview.connect('button-press-event', treeview_clicked)

        def treeview_focus(widget, event):
          self.set_next_unread_sensitivity()
        treeview.connect('focus-in-event', treeview_focus)
        treeview.connect('focus-out-event', treeview_focus)

        def set_sort_column_id(tvcol, sort_column_id):
          def was_sorted(model):
            colnum, order = model.get_sort_info()
            tvcol.set_property('sort-indicator', colnum == sort_column_id)
            tvcol.set_property('sort-order', order)

          def set_up_model(tv, data=None):
            model = tv.get_model()
            if not model: return
            if not hasattr(model, 'get_model'): return
            model = model.get_model() # find the real model
            if not model: return
            model.connect('sorted', was_sorted)
            was_sorted(model)

          def choose_order(colnum, order):
            if colnum != sort_column_id or order == gtk.SORT_DESCENDING:
              return gtk.SORT_ASCENDING
            return gtk.SORT_DESCENDING

          def clicked(tvcol, *args):
            model = tv.get_model()
            if not model: return
            model = model.get_model() # find the real model
            if not model: return
            order = choose_order(*model.get_sort_info())
            model.sort(sort_column_id, order)

          tvcol.set_clickable(True)
          tvcol.connect('clicked', clicked)
          tv = tvcol.get_tree_view()
          tv.connect('notify::model', set_up_model)
          set_up_model(tv)

        treeview.insert_column_with_attributes(0, 'Starred',
            gtk.CellRendererPixbuf(),
            pixbuf=PostsTreeModel.colnum('star'))
        star_column = treeview.get_column(0)
        treeview.get_column(0).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        treeview.get_column(0).set_fixed_width(24)
        treeview.get_column(0).set_min_width(24)
        treeview.get_column(0).set_max_width(24)
        star_heading = images.make_widget('blank')
        star_heading.show()
        treeview_heading_widgets.append(star_heading)
        treeview.get_column(0).set_widget(star_heading)

        treeview.insert_column_with_attributes(1, 'Read',
            gtk.CellRendererPixbuf(),
            pixbuf=PostsTreeModel.colnum('read_image'))
        read_column = treeview.get_column(1)
        treeview.get_column(1).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        treeview.get_column(1).set_fixed_width(24)
        treeview.get_column(1).set_min_width(24)
        treeview.get_column(1).set_max_width(24)
        read_heading = images.make_widget('blank')
        read_heading.show()
        treeview_heading_widgets.append(read_heading)
        treeview.get_column(1).set_widget(read_heading)

        title_cell_renderer = gtk.CellRendererText()
        title_cell_renderer.set_property('ellipsize', pango.ELLIPSIZE_END)
        treeview.insert_column_with_attributes(2, 'Title',
            title_cell_renderer,
            text=PostsTreeModel.colnum('title'),
            weight=PostsTreeModel.colnum('weight'))
        title_column = treeview.get_column(2)
        set_sort_column_id(title_column, PostsTreeModel.colnum('title'))
        treeview.get_column(2).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        treeview.get_column(2).set_expand(True)
        treeview_title_heading = gtk.Label('Title')
        treeview_title_heading.show()
        treeview_heading_widgets.append(treeview_title_heading)
        treeview.get_column(2).set_widget(treeview_title_heading)

        updated_cell_renderer = gtk.CellRendererText()
        updated_cell_renderer.set_property('ellipsize', pango.ELLIPSIZE_END)
        treeview.insert_column_with_attributes(3, 'Date',
            updated_cell_renderer,
            text=PostsTreeModel.colnum('pretty_date'))
        date_column = treeview.get_column(3)
        set_sort_column_id(date_column, PostsTreeModel.colnum('age'))
        treeview.get_column(3).set_sizing(gtk.TREE_VIEW_COLUMN_FIXED)
        treeview.get_column(3).set_fixed_width(100)
        treeview.get_column(3).set_min_width(100)
        treeview.get_column(3).set_max_width(100)
        treeview_date_heading = gtk.Label('Date')
        treeview_date_heading.show()
        treeview_heading_widgets.append(treeview_date_heading)
        treeview.get_column(3).set_widget(treeview_date_heading)

        main_area = self.builder.get_object('main-area')
        status_paned = self.builder.get_object('status-paned')

        def update_unread_counts(*args):
          message = locale.format_string('%d unread', self.unreadnews.unread,
              grouping=True)
          sources_status.set_text(message)
          self.set_title('Feedie (%s)' % (message,))

        self.unreadnews.connect('summary-changed', update_unread_counts)
        update_unread_counts()

        def sources_pane_resized(sv, rect):
          new_pos = main_area.get_position()
          if status_paned.get_position() != new_pos:
            status_paned.set_position(new_pos)
          gconf_client.set_int('/apps/feedie/geometry/main-pane-position', new_pos)

        def status_paned_resized(sp, rect):
          new_pos = status_paned.get_position()
          if main_area.get_position() != new_pos:
            main_area.set_position(new_pos)
          gconf_client.set_int('/apps/feedie/geometry/main-pane-position', new_pos)

        def vpaned_resized(vp, rect):
          new_pos = vpaned1.get_position()
          gconf_client.set_int('/apps/feedie/geometry/posts-pane-position',
              new_pos)

        self.sources_view.connect('size-allocate', sources_pane_resized)
        sources_status.connect('size-allocate', status_paned_resized)

        vpaned1 = self.builder.get_object('vpaned1')
        self.builder.get_object('scrolledwindow2').connect('size-allocate',
          vpaned_resized)
        pos = gconf_client.get_int('/apps/feedie/geometry/posts-pane-position')
        if not pos: pos = 200
        vpaned1.set_position(pos)

        pos = gconf_client.get_int('/apps/feedie/geometry/main-pane-position')
        if not pos: pos = 225
        main_area.set_position(pos)
        status_paned.set_position(pos)
        blue = gtk.gdk.color_parse('#7db6ff')
        self.builder.get_object('subscribe-box').modify_bg(gtk.STATE_NORMAL, blue)

        self.selected_source_to_remove = []
        self.sources_view.connect('selection-changed', self.select_feed,
            self.selected_source_to_remove)

        self.sources_view.select(self.unreadnews.id)
        sw2 = self.builder.get_object('scrolledwindow2')
        self.treeview.grab_focus()

    def mark_as_read(self, action):
      treeviewsel = self.treeview.get_selection()
      mark_selected_posts_as_read(treeviewsel)

    def mark_as_unread(self, action):
      treeviewsel = self.treeview.get_selection()
      mark_selected_posts_as_unread(treeviewsel)

    def get_next_row(self, step):
      tv = self.treeview
      model = tv.get_model()
      path, col = tv.get_cursor()
      if path is None: return 0
      return path[0] + step

    def move_to(self, row):
      if row is None: return
      tv = self.treeview
      model = tv.get_model()
      if row < 0 or row >= len(model): return
      tv.set_cursor(row)

    def move_by(self, n):
      self.move_to(self.get_next_row(n))

    def find_next_unread(self):
      def row_is_unread(n):
        iter = model.get_iter(n)
        read = model.get_value(iter, read_column)
        return not read

      model = self.treeview.get_model()
      if model is None: return None
      row = self.get_next_row(1)
      while row < len(model):
        if row_is_unread(row):
          return row
        row += 1
      return None

    def next_unread(self, action=None):
      self.move_to(self.find_next_unread())

    def paging_keypress(self, widget, event):
      key = gtk.gdk.keyval_name(event.keyval)

      if key == 'j':
        self.move_by(1)
        return True

      if key == 'k':
        self.move_by(-1)
        return True

      if key in ('Page_Down', 'Page_Up'):
        if widget is self.web: return False
        self.web.emit('key-press-event', event)
        return True

      if key == 'space':
        sw = self.builder.get_object('scrolledwindow1')
        vadj = sw.get_vadjustment()
        if vadj.value >= vadj.upper - vadj.page_size:
          # At the bottom, so view next unread
          self.next_unread()
        else:
          # Just page down
          vadj.value += vadj.page_increment

        return True

    def set_next_unread_sensitivity(self):
      if self.treeview.is_focus() or self.web.is_focus():
        row = self.find_next_unread()
        sensitive = row is not None
      else:
        sensitive = False
      self.builder.get_object('action-next-unread').set_sensitive(sensitive)

    def warning_message(self, message, title='Feedie'):
      dialog = gtk.MessageDialog(
          parent=self,
          flags=0,
          type=gtk.MESSAGE_WARNING,
          buttons=gtk.BUTTONS_CLOSE,
          message_format=message)
      dialog.props.title = title
      dialog.run()
      dialog.destroy()

    def import_subscriptions(self, widget, data=None):
      chooser = gtk.FileChooserDialog('Import Subscriptions', self,
          buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
                   gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
      response = chooser.run()
      if response == gtk.RESPONSE_ACCEPT:
        filename = chooser.get_filename()
      else:
        filename = None
      chooser.destroy()
      if filename is not None:
        try:
          dom = minidom.parse(filename)
        except xml.parsers.expat.ExpatError:
          basename = os.path.basename(filename)
          template = u'Could not find a subscription list in \u201c%s\u201d'
          self.warning_message(template % (basename,),
              title='Import Subscriptions')
          return
        links = dom.getElementsByTagName('outline')
        subs = []
        for link in links:
          if link.hasAttribute('xmlUrl'):
            uri = link.getAttribute('xmlUrl')
            title = link.getAttribute('title')
            sub = {'uri':uri,'defaults':{}}
            if title: sub['defaults']['user_title'] = title
            subs.append(sub)
        d = sources.add_subscriptions(subs)
        @d.addCallback
        def d(feeds):
          sources.refresh_feeds(feeds)

    def search_changed(self, entry):
      #model = self.treeview.get_model()
      #if not model: return
      #model.refilter() # Why is this so slow? WTF.
      #self.update_posts_title(model, None, None)

      # And for my next trick...
      self.search_terms = entry.get_text().lower().split()
      self.select_feed(self.sources_view, self.sources_view.selected_id,
            self.selected_source_to_remove)

    def update_posts_title(self, model, path, iter=None, extra=None):
      source = self.sources_view.selected
      if source is None: return
      title = locale.format_string(u'%s \u2013 %d posts',
          (source.title, len(model)), grouping=True)
      if self.search_terms:
        terms = [u'\u201c%s\u201d' % (x,) for x in self.search_terms]
        title += ' containing ' + ', '.join(terms)
      if extra:
        title = extra + title
      self.treeview.get_column(2).get_widget().set_text(title)

    def select_feed(self, widget, selected_id, to_remove):
      source = widget.selected

      removable = bool(source is not None and source.is_removable)
      self.builder.get_object('action-remove-feed').set_sensitive(removable)

      refreshable = bool(source and source.can_refresh)
      self.builder.get_object('action-refresh').set_sensitive(refreshable)

      self.set_next_unread_sensitivity()

      if source is None:
        treeview = self.builder.get_object('posts-treeview')
        treeview.set_model(None)
        treeview.get_column(2).get_widget().set_text('')
        self.builder.get_object('scrolledwindow2').hide()
        self.web.load_html_string('', 'file:///')
        return

      if (not source.error) or source.summary['total']:
        def show(x, source):
          def search(model, iter, data=None):
            title = model.get_value(iter, PostsTreeModel.colnum('title')).lower()
            for term in self.search_terms:
              if term not in title:
                return False
            return True

          need_loading_message[0] = False

          raw_model.sort(PostsTreeModel.colnum('age'), gtk.SORT_ASCENDING)
          filtered_model = raw_model.filter_new()
          filtered_model.set_visible_func(search)

          treeview = self.builder.get_object('posts-treeview')
          treeview.set_model(filtered_model)
          filtered_model.connect('row-inserted', self.update_posts_title)
          filtered_model.connect('row-deleted', self.update_posts_title)
          self.update_posts_title(filtered_model, None, None)
          self.builder.get_object('scrolledwindow2').show()

        def show_loading_message(source):
          if need_loading_message[0]:
            treeview = self.builder.get_object('posts-treeview')
            empty_model = gtk.ListStore(*PostsTreeModel.coltypes())
            treeview.set_model(empty_model)
            self.update_posts_title(source, None, None, extra='Loading ')

        need_loading_message = [True]
        reactor.callLater(0.20, show_loading_message, source)
        raw_model = PostsTreeModel(source)
        for disconnecter in to_remove:
          disconnecter()
        to_remove[:] = []
        to_remove.append(source.connect('posts-added', raw_model.posts_added))
        to_remove.append(source.connect('post-removed', raw_model.post_removed))
        d = raw_model.load()
        d.addCallback(show, source)
      else:
        treeview = self.builder.get_object('posts-treeview')
        treeview.set_model(None)
        treeview.get_column(2).get_widget().set_text('')
        self.builder.get_object('scrolledwindow2').hide()

      source_template.source = source
      html = str(source_template)
      self.web.load_html_string(html, 'file:///')


    def about(self, widget, data=None):
        """about - display the about box for feedie """
        about = AboutFeedieDialog.NewAboutFeedieDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """preferences - display the preferences window for feedie """
        dialog = PreferencesFeedieDialog.NewPreferencesFeedieDialog(self._preferences)
        dialog.set_transient_for(self)
        response = dialog.run()
        dialog.destroy()

    def quit(self, widget, data=None):
        """quit - signal handler for closing the FeedieWindow"""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """on_destroy - called when the FeedieWindow is close. """
        #clean up code for saving application state should be added here

        # For some reason a treeview with many rows takes a long time to
        # destroy, but removing its model is fast. So this lets us quit much
        # quicker.
        self.treeview.set_model(None)

        # We want startup to be fast, so kick this off just in case. That way
        # the view will be up to date for next time.
        self.db.touch_view('feedie/feed_post')

        #gtk.main_quit()
        reactor.stop()

    def show_subscribe(self, widget, data=None):
        self.builder.get_object('subscribe-box').show()
        self.builder.get_object('subscribe-entry').grab_focus()

    def cancel_subscribe(self, widget, data=None):
        self.hide_subscribe_box()

    def start_subscribe(self):
        value = self.hide_subscribe_box()
        self.subscribe(value.strip().replace('\r', '').replace('\n', ''))

    def process_args(self, args):
      for arg in args:
        self.subscribe(str(arg))

    def subscribe(self, uri):
        d = sources.add_subscriptions([dict(uri=uri)])
        # We don't catch errors here. Just let Twisted dump a stack trace.
        # It's best for debugging, and we can't help the user anyway.

        @d.addCallback
        def d(feeds):
          feed = feeds[0]
          d = feed.refresh(force=True)

          @d.addCallback
          def d(feed):
            self.sources_view.select(feed.id)
            self.sources_view.flash(feed.id)


    def subscribe_cb(self, widget, data=None):
        self.start_subscribe()

    def hide_subscribe_box(self):
        self.builder.get_object('subscribe-box').hide()
        text = self.builder.get_object('subscribe-entry').get_text()
        self.builder.get_object('subscribe-entry').set_text('')
        self.treeview.grab_focus()
        return text

    def subscribe_entry_keypress(self, widget, data=None):
        key = gtk.gdk.keyval_name(data.keyval)

        if key == 'Return':
          self.start_subscribe()
          return

        if key == 'Escape':
          self.hide_subscribe_box()
          return

    def remove_feed(self, widget, data=None):
      sel = self.sources_view.selected
      if sel is not None:
        sel.delete()

    def refresh(self, widget, data=None):
      def success(x):
        self.sources_view.flash(sel.id)
      sel = self.sources_view.selected
      if sel:
        d = sel.refresh(force=True)
        d.addCallback(success)

@defer.inlineCallbacks
def NewFeedieWindow():
    """NewFeedieWindow - returns a fully instantiated
    FeedieWindow object. Use this function rather than
    creating a FeedieWindow directly.
    """

    #look for the ui file that describes the ui
    ui_filename = os.path.join(getdatapath(), 'ui', 'FeedieWindow.ui')
    if not os.path.exists(ui_filename):
        ui_filename = None

    builder = gtk.Builder()
    builder.add_from_file(ui_filename)
    window = builder.get_object("feedie_window")
    window.set_icon_from_file(getdatapath() + '/media/logo.png')
    yield window.finish_initializing(builder)
    defer.returnValue(window)

def open_window(window, control, args):
    control.window = window
    width, height = gconf_client.get_pair('/apps/feedie/geometry/window-size',
        'GCONF_VALUE_INT',
        'GCONF_VALUE_INT')
    if not width: width = 800
    if not height: height = 800
    window.set_default_size(width, height)
    window.show()
    window.process_args(args)

class Control(dbus.service.Object):
  window = None

  @dbus.service.method(dbus_interface='us.xph.Interface',
                       in_signature='as', out_signature='')
  def process_args(self, args):
    if self.window:
      self.window.process_args(args)

if __name__ == "__main__":
    #support for command line options
    import logging, optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Show debug messages")
    (options, args) = parser.parse_args()

    #set the logging level to show debug messages
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    gtk.rc_parse_string('''
style "feedie-scrolledwindow"
{
  GtkScrolledWindow::scrollbar-spacing = 0
}
class "GtkWidget" style "feedie-scrolledwindow"
    ''')

    #run the application
    gtk.gdk.threads_init()

    from dbus.mainloop.glib import DBusGMainLoop
    DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()

    try:
      bus_name = dbus.service.BusName('us.xph.Feedie', bus=bus,
          do_not_queue=True)
      control = Control(bus_name, '/')
      d = NewFeedieWindow()
      d.addCallback(open_window, control, args)
      reactor.run() #gtk.main()
    except dbus.exceptions.NameExistsException:
      server = dbus.Interface(bus.get_object('us.xph.Feedie', '/'),
                              'us.xph.Interface')
      server.process_args(args)

